type User {
  ID: ID!
  username: String!
  email: String!
}

type TokenUser {
  ID: ID!
  token: String!
  username: String
  email: String
}

type RegistrationStatus {
  message: String!
  status: String!
}

extend type Query {
  getLoggedInUser: TokenUser
}

input RegisterUserInput {
  username: String!
  email: String!
  plainPassword: String!
}

input LoginUserWithEmailInput {
  email: String!
  plainPassword: String!
}

input LoginUserWithUsernameInput {
  username: String!
  plainPassword: String!
}

extend type Mutation {
  registerUser(input: RegisterUserInput!): RegistrationStatus
  loginUserWithEmail(input: LoginUserWithEmailInput!): TokenUser
  loginUserWithUsername(input: LoginUserWithUsernameInput!): TokenUser
}

